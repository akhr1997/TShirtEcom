from rest_framework import viewsets
from rest_framework.permissions import AllowAny
from .serializers import UserSerializer
from .models import CustomUser
from django.http import JsonResponse, HttpResponse
from django.contrib.auth import get_user_model
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth import login, logout
import random
import re #to run regex

# Create your views here.

def generate_session_token(length=10):
    return ''.join(random.SystemRandom().choice([chr(i) for i in range(97, 123)] + [str(i) for i in range(10)]) for _ in range(length))
    #generating a random 10 digit session id

@csrf_exempt

def signin(request):
    if not request.method == 'POST':
        return JsonResponse ({'error': 'Send a post request with valid parameters only'})
    
    username = request.POST['email'] #classic django
    password = request.POST['password'] #classic django

#validation of username and password
    if not re.match("\b[\w\.-]+@[\w\.-]+\.\w{2,4}\b", username):
        return JsonResponse ({'error': 'Enter a valid email'})

    if len(password) < 5:
        return JsonResponse ({'error': 'password need to be atleat 5 characters'})


    Usermodel = get_user_model()
    
    try:
        user = UserModel.objects.get(email=username)

        if user.check_password(password):#check_password comes from Django
            usr_dict = UserModel.objects.filter(email=username).values().first()
            usr_dict.pop('password') #pop put so that it doesn't travel to front end

            if user.session_token != "0":
                user.session_token = "0"
                user.save()
                return JsonResponse({'error': 'Old session still in progress'})
            
            token = generate_session_token
            user.session_token = token
            user.save()
            login(request, user) #comes from django
            return JsonResponse({'token': token, 'user': usr_dict})

        else:
            return JsonResponse({'error': 'Invalid Password'})

    except UserModel.DoesNotExist:
        return JsonResponse ({'error': 'Invalid Email'})
    
def signout(request, id):
    logout(request)#see if we can add it after saving like sign-in

    UserModel = get_user_model

    try:
        user = UserModel.objects.get(pk=id)
        user.session_token = "0"
        user.save()

    except UserModel.DoesNotExist:
        return JsonResponse({'error': 'Invalid User ID'})
    
    return JsonResponse({'success': 'Logout success!'})


class UserViewSet(viewsets.ModelViewSet):
    permission_classes_by_action = {'create': '[AllowAny]'}

    queryset = CustomUser.objects.all().order_by('id')
    serializer_class = UserSerializer

    def get_permissions(self):
        try:
            return [permission() for permission in self.permission_classes_by_action[self.action]]
        except KeyError:
            return [permission() for permission in self.permission_classes]



